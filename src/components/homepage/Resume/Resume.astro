---
// See https://docs.astro.build/en/guides/markdown-content/#importing-markdown
import * as ResumeMarkdown from './Resume.md';
import classNames from 'classnames';
import ResumeHeader from './ResumeHeader.astro';
import Text from '../../Text.astro';
import ResumeSkills from './ResumeSkills.astro';
import RelatedExperience from './RelatedExperience.astro';
import type {
  Education,
  ProfessionalExperience as ProfessionalExperienceType,
  RelatedExperience as RelatedExperienceType,
  Talk,
} from './Resume';
import ProfessionalExperience from './ProfessionalExperience.astro';
import Talks from './Talks.astro';
import EducationExperience from './EducationExperience.astro';
import Wrapper from './Wrapper.astro';
import { EMAIL, PHONE, WEBSITE } from '../../../config';

export interface Props extends Omit<astroHTML.JSX.BaseHTMLAttributes, 'slot'> {
  as?: keyof HTMLElementTagNameMap;
  format?: 'web' | 'print';
}

interface ResumeFrontmatter {
  name: string;
  title: string;
  lead: string;
  expertise: string[];
  learning: string[];
  education: Education[];
  professionalExperience: ProfessionalExperienceType[];
  relatedExperience: RelatedExperienceType[];
  talks: Talk[];
}

const resume = ResumeMarkdown.frontmatter as ResumeFrontmatter;

const { as: Element = 'div', class: className, format = 'web', ...rest } = Astro.props;
const classes = classNames('resume', format, className);
---

<Element class={classes} {...rest} data-cy="resume">
  <ResumeHeader
    as={format === 'print' ? 'header' : 'hgroup'}
    class="lead"
    lead={resume.lead}
    ownerName={resume.name}
    ownerTitle={resume.title}
    email={format === 'print' ? EMAIL : undefined}
    phone={format === 'print' ? PHONE : undefined}
    websiteUrl={format === 'print' ? WEBSITE : undefined}
  />
  <section class="skills">
    <div>
      <Text as="h3" class="title inline inline-title">Extensive Experience</Text>
      <ResumeSkills class="inline" skills={resume.expertise} />
    </div>
    <div>
      <Text as="h3" class="title inline inline-title">Learning</Text>
      <ResumeSkills class="inline" skills={resume.learning} />
    </div>
  </section>
  <Wrapper class="columns" wrap={format === 'print'}>
    <div class="col col1">
      <section class="experience">
        <Text as="h3" class="title">Professional Experience</Text>
        {resume.professionalExperience.map((experience) => <ProfessionalExperience {...experience} />)}
      </section>
      <section class="talks">
        <Text as="h3" class="title">Talks &amp; Workshops</Text>
        <Talks talks={resume.talks} />
      </section>
    </div>

    <div class="col col2">
      <section class="freelance">
        <Text as="h3" class="title">Freelance &amp; Related Experience</Text>
        {resume.relatedExperience.map((experience) => <RelatedExperience {...experience} />)}
      </section>
      <section class="education">
        <Text as="h3" class="title">Education &amp; Training</Text>
        {resume.education.map((edu) => <EducationExperience {...edu} />)}
      </section>
    </div>
  </Wrapper>
</Element>
<style>
  .resume {
    --resume-border: rgba(212, 207, 209, 0.5);
    --resume-v-gap: 1.25rem;
    --resume-h-gap: 2rem;

    display: grid;
    grid-template-areas:
      'header'
      'skills'
      'col1'
      'col2';
    grid-gap: var(--resume-v-gap) var(--resume-h-gap);
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding-inline: var(--h-space);
  }

  .resume:where(.print) {
    padding-inline: 0;
  }

  .resume:where(.print) > :is(.lead, .skills, .columns) {
    padding-inline: var(--h-space);
    margin-inline: 0;
  }

  @media (min-width: 62.5rem) {
    .resume {
      grid-template-areas:
        'header header'
        'skills skills'
        'col1 col2';
      grid-template-columns: 1fr 1fr;
    }
  }

  /* Responsive for browsering /print on the web */
  @media (min-width: 62.5rem) {
    .resume:where(.print) {
      column-count: 2;
      column-gap: 0;
      column-fill: auto;
      display: block;
    }
  }

  /* Forces two column layout when generating a pdf via scripts/pdf.mjs */
  .resume:where(.print) {
    column-count: 2;
    column-gap: 0;
    column-fill: auto;
    display: block;
  }

  .header {
    grid-area: header;
  }

  .resume:where(.print) .header {
    column-span: all;
    margin-block-end: 2rem;
  }

  .skills {
    grid-area: skills;
  }

  .skills > *:not(:last-of-type) {
    margin-block-end: 1rem;
  }

  .resume:where(.print) .skills {
    column-span: all;
    margin-block-end: 1rem;
  }

  .col:not(:last-of-type),
  .col > *:not(:last-of-type) {
    margin-block-end: 2rem;
  }

  .col1 {
    grid-area: col1;
  }

  @media (min-width: 62.5rem) {
    .col1 {
      padding-inline-end: 1rem;
    }
  }

  .col2 {
    grid-area: col2;
  }

  .title {
    text-transform: uppercase;
    font-weight: var(--font-body-weight-bold);
    margin-block-end: 0.5rem;
  }

  .inline {
    display: inline;
    margin-block-end: 0;
  }

  .inline-title {
    margin-inline-end: 0.5rem;
  }
</style>
